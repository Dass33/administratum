// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: update_column_data.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const updateColumnData = `-- name: UpdateColumnData :exec
UPDATE column_data
SET value = ?,
    updated_at = datetime('now')
WHERE id = ?
`

type UpdateColumnDataParams struct {
	Value sql.NullString
	ID    uuid.UUID
}

func (q *Queries) UpdateColumnData(ctx context.Context, arg UpdateColumnDataParams) error {
	_, err := q.db.ExecContext(ctx, updateColumnData, arg.Value, arg.ID)
	return err
}

const updateColumnDataWithPermissionCheck = `-- name: UpdateColumnDataWithPermissionCheck :execrows
UPDATE column_data
SET value = ?,
    updated_at = datetime('now')
WHERE column_data.id = ? 
  AND column_data.column_id IN (
    SELECT columns.id FROM columns
    JOIN sheets ON columns.sheet_id = sheets.id
    JOIN branches ON sheets.branch_id = branches.id
    JOIN user_tables ON branches.table_id = user_tables.table_id
    WHERE user_tables.user_id = ? 
      AND user_tables.permission IN ('owner', 'contributor')
  )
`

type UpdateColumnDataWithPermissionCheckParams struct {
	Value  sql.NullString
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UpdateColumnDataWithPermissionCheck(ctx context.Context, arg UpdateColumnDataWithPermissionCheckParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateColumnDataWithPermissionCheck, arg.Value, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

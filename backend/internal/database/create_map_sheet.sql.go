// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_map_sheet.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMapSheet = `-- name: CreateMapSheet :one
INSERT INTO sheets (id, name, branch_id, type, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    ?,
    ?,
    'map',
    datetime('now'),
    datetime('now')
)
RETURNING id
`

type CreateMapSheetParams struct {
	Name     string
	BranchID uuid.UUID
}

func (q *Queries) CreateMapSheet(ctx context.Context, arg CreateMapSheetParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createMapSheet, arg.Name, arg.BranchID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createMapSheetColumns = `-- name: CreateMapSheetColumns :exec
INSERT INTO columns (id, name, type, required, sheet_id, created_at, updated_at)
VALUES 
    (gen_random_uuid(), 'name', 'text', true, ?1, datetime('now'), datetime('now')),
    (gen_random_uuid(), 'value', 'any', true, ?1, datetime('now'), datetime('now')),
    (gen_random_uuid(), 'comment', 'text', false, ?1, datetime('now'), datetime('now'))
`

func (q *Queries) CreateMapSheetColumns(ctx context.Context, sheetID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, createMapSheetColumns, sheetID)
	return err
}

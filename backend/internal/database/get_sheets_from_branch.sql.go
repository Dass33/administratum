// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_sheets_from_branch.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getSheetsFromBranch = `-- name: GetSheetsFromBranch :many
select
    s.id id,
    s.name name,
    row_count,
    s.updated_at updated_at,
    s.created_at created_at
from branches b
join sheets s on b.id = s.branch_id and b.id = ?
`

type GetSheetsFromBranchRow struct {
	ID        uuid.UUID
	Name      string
	RowCount  int64
	UpdatedAt time.Time
	CreatedAt time.Time
}

func (q *Queries) GetSheetsFromBranch(ctx context.Context, id uuid.UUID) ([]GetSheetsFromBranchRow, error) {
	rows, err := q.db.QueryContext(ctx, getSheetsFromBranch, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSheetsFromBranchRow
	for rows.Next() {
		var i GetSheetsFromBranchRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RowCount,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

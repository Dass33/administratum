// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_columns_with_data.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getColumnsWithData = `-- name: GetColumnsWithData :many
SELECT 
    c.id as column_id,
    c.name as column_name,
    c.type as column_type,
    c.required as column_required,
    cd.id as data_id,
    cd.idx as data_idx,
    cd.value as data_value
FROM columns c
LEFT JOIN column_data cd ON c.id = cd.column_id
WHERE EXISTS (
    SELECT 1
    FROM sheets s
    WHERE s.id = c.sheet_id AND s.id = ?
)
ORDER BY c.id, cd.idx
`

type GetColumnsWithDataRow struct {
	ColumnID       uuid.UUID
	ColumnName     string
	ColumnType     string
	ColumnRequired bool
	DataID         uuid.NullUUID
	DataIdx        sql.NullInt64
	DataValue      sql.NullString
}

func (q *Queries) GetColumnsWithData(ctx context.Context, id uuid.UUID) ([]GetColumnsWithDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getColumnsWithData, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetColumnsWithDataRow
	for rows.Next() {
		var i GetColumnsWithDataRow
		if err := rows.Scan(
			&i.ColumnID,
			&i.ColumnName,
			&i.ColumnType,
			&i.ColumnRequired,
			&i.DataID,
			&i.DataIdx,
			&i.DataValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_columns_with_data_by_sheet.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getColumnsWithDataBySheet = `-- name: GetColumnsWithDataBySheet :many
SELECT 
    c.id as column_id,
    c.name as column_name,
    c.type as column_type,
    c.required as column_required,
    cd.id as data_id,
    cd.idx as data_idx,
    cd.value as data_value,
    cd.type as data_type
FROM columns c
LEFT JOIN column_data cd ON c.id = cd.column_id
WHERE c.sheet_id = ?
ORDER BY c.created_at, cd.idx
`

type GetColumnsWithDataBySheetRow struct {
	ColumnID       uuid.UUID
	ColumnName     string
	ColumnType     string
	ColumnRequired bool
	DataID         uuid.NullUUID
	DataIdx        sql.NullInt64
	DataValue      sql.NullString
	DataType       sql.NullString
}

func (q *Queries) GetColumnsWithDataBySheet(ctx context.Context, sheetID uuid.UUID) ([]GetColumnsWithDataBySheetRow, error) {
	rows, err := q.db.QueryContext(ctx, getColumnsWithDataBySheet, sheetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetColumnsWithDataBySheetRow
	for rows.Next() {
		var i GetColumnsWithDataBySheetRow
		if err := rows.Scan(
			&i.ColumnID,
			&i.ColumnName,
			&i.ColumnType,
			&i.ColumnRequired,
			&i.DataID,
			&i.DataIdx,
			&i.DataValue,
			&i.DataType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: add_column_data.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addColumnData = `-- name: AddColumnData :one
INSERT INTO column_data (id, idx, value, column_id, created_at, updated_at)
VALUES (
    gen_random_uuid(),
    ?,
    ?,
    ?,
    datetime('now'),
    datetime('now')
)
RETURNING id, idx, value, column_id, created_at, updated_at
`

type AddColumnDataParams struct {
	Idx      int64
	Value    sql.NullString
	ColumnID uuid.UUID
}

func (q *Queries) AddColumnData(ctx context.Context, arg AddColumnDataParams) (ColumnDatum, error) {
	row := q.db.QueryRowContext(ctx, addColumnData, arg.Idx, arg.Value, arg.ColumnID)
	var i ColumnDatum
	err := row.Scan(
		&i.ID,
		&i.Idx,
		&i.Value,
		&i.ColumnID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSheetRowCountByColumn = `-- name: UpdateSheetRowCountByColumn :exec
UPDATE sheets
SET row_count = CASE 
    WHEN row_count < ? THEN ?
    ELSE row_count
    END,
    updated_at = datetime('now')
WHERE id = (
    SELECT c.sheet_id 
    FROM columns c 
    WHERE c.id = ?
)
`

type UpdateSheetRowCountByColumnParams struct {
	RowCount   int64
	RowCount_2 int64
	ID         uuid.UUID
}

func (q *Queries) UpdateSheetRowCountByColumn(ctx context.Context, arg UpdateSheetRowCountByColumnParams) error {
	_, err := q.db.ExecContext(ctx, updateSheetRowCountByColumn, arg.RowCount, arg.RowCount_2, arg.ID)
	return err
}

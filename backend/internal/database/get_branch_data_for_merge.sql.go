// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_branch_data_for_merge.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getBranchDataForMerge = `-- name: GetBranchDataForMerge :many
SELECT 
    s.id as sheet_id,
    s.name as sheet_name,
    s.type as sheet_type,
    s.created_at as sheet_created_at,
    s.updated_at as sheet_updated_at,
    s.source_sheet_id,
    c.id as column_id,
    c.name as column_name,
    c.type as column_type,
    c.required as column_required,
    c.created_at as column_created_at,
    c.updated_at as column_updated_at,
    c.source_column_id,
    cd.id as column_data_id,
    cd.idx as column_data_idx,
    cd.value as column_data_value,
    cd.created_at as column_data_created_at,
    cd.updated_at as column_data_updated_at
FROM sheets s
LEFT JOIN columns c ON c.sheet_id = s.id
LEFT JOIN column_data cd ON cd.column_id = c.id
WHERE s.branch_id = ?
ORDER BY s.id, c.id, cd.idx
`

type GetBranchDataForMergeRow struct {
	SheetID             uuid.UUID
	SheetName           string
	SheetType           string
	SheetCreatedAt      time.Time
	SheetUpdatedAt      time.Time
	SourceSheetID       sql.NullString
	ColumnID            uuid.NullUUID
	ColumnName          sql.NullString
	ColumnType          sql.NullString
	ColumnRequired      sql.NullBool
	ColumnCreatedAt     sql.NullTime
	ColumnUpdatedAt     sql.NullTime
	SourceColumnID      sql.NullString
	ColumnDataID        uuid.NullUUID
	ColumnDataIdx       sql.NullInt64
	ColumnDataValue     sql.NullString
	ColumnDataCreatedAt sql.NullTime
	ColumnDataUpdatedAt sql.NullTime
}

func (q *Queries) GetBranchDataForMerge(ctx context.Context, branchID uuid.UUID) ([]GetBranchDataForMergeRow, error) {
	rows, err := q.db.QueryContext(ctx, getBranchDataForMerge, branchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBranchDataForMergeRow
	for rows.Next() {
		var i GetBranchDataForMergeRow
		if err := rows.Scan(
			&i.SheetID,
			&i.SheetName,
			&i.SheetType,
			&i.SheetCreatedAt,
			&i.SheetUpdatedAt,
			&i.SourceSheetID,
			&i.ColumnID,
			&i.ColumnName,
			&i.ColumnType,
			&i.ColumnRequired,
			&i.ColumnCreatedAt,
			&i.ColumnUpdatedAt,
			&i.SourceColumnID,
			&i.ColumnDataID,
			&i.ColumnDataIdx,
			&i.ColumnDataValue,
			&i.ColumnDataCreatedAt,
			&i.ColumnDataUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
